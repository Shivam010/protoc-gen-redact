syntax = "proto3";

package tests;

import "redact/redact.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/Shivam010/protoc-gen-redact/examples/tests;tests";

enum TestEnum {
    ValueZero = 0;
    ValueOne = 1;
    ValueTwo = 2;
}

message TestMessage {
    float float = 1 [(redact.redact) = true];
    float float_custom = 2 [(redact.custom).float = 3.2];

    double double = 3 [(redact.redact) = true];
    double double_custom = 4 [(redact.custom).double = 6.4];

    int32 int32 = 5 [(redact.redact) = true];
    int32 int32_custom = 6 [(redact.custom).int32 = 32];

    int64 int64 = 7 [(redact.redact) = true];
    int64 int64_custom = 8 [(redact.custom).int64 = 64];

    uint32 uint32 = 9 [(redact.redact) = true];
    uint32 uint32_custom = 10 [(redact.custom).uint32 = 32];

    uint64 uint64 = 11 [(redact.redact) = true];
    uint64 uint64_custom = 12 [(redact.custom).uint64 = 64];

    sint32 sint32 = 13 [(redact.redact) = true];
    sint32 sint32_custom = 14 [(redact.custom).sint32 = 32];

    sint64 sint64 = 15 [(redact.redact) = true];
    sint64 sint64_custom = 16 [(redact.custom).sint64 = 64];

    fixed32 fixed32 = 17 [(redact.redact) = true];
    fixed32 fixed32_custom = 18 [(redact.custom).fixed32 = 32];

    fixed64 fixed64 = 19 [(redact.redact) = true];
    fixed64 fixed64_custom = 20 [(redact.custom).fixed64 = 64];

    sfixed32 sfixed32 = 21 [(redact.redact) = true];
    sfixed32 sfixed32_custom = 22 [(redact.custom).sfixed32 = 32];

    sfixed64 sfixed64 = 23 [(redact.redact) = true];
    sfixed64 sfixed64_custom = 24 [(redact.custom).sfixed64 = 64];

    bool bool = 25 [(redact.redact) = true];
    bool bool_custom = 26 [(redact.custom).bool = true];

    string string = 27 [(redact.redact) = true];
    string string_custom = 28 [(redact.custom).string = "redacted-custom-value"];

    bytes bytes = 29 [(redact.redact) = true];
    bytes bytes_custom = 30 [(redact.custom).bytes = "redacted-custom-value"];

    TestEnum enum = 31 [(redact.redact) = true];
    TestEnum enum_custom = 32 [(redact.custom).enum = 2];

    TestMessage message = 33 [(redact.redact) = true];
    TestMessage message_nil = 34 [(redact.custom).message.nil = true];
    TestMessage message_skip = 35 [(redact.custom).message.skip = true];
    TestMessage message_empty = 36 [(redact.custom).message.empty = true];

    map<int64, string> map1 = 37 [(redact.redact) = true];
    map<string, google.protobuf.Empty> map2 = 38 [(redact.redact) = true];

    map<int64, string> map1_empty = 39 [(redact.custom).element.empty = true];
    map<string, google.protobuf.Empty> map2_empty = 40 [(redact.custom).element.empty = true];

    map<int64, string> map1_nested = 41 [(redact.custom).element.nested = true];
    map<string, google.protobuf.Empty> map2_nested = 42 [(redact.custom).element.nested = true];

    map<int64, string> map1_item = 43 [(redact.custom).element.item.string = "3"];
    map<string, google.protobuf.Empty> map2_item_nil = 44 [(redact.custom).element.item.message.nil = true];
    map<string, google.protobuf.Empty> map2_item_skip = 45 [(redact.custom).element.item.message.skip = true];
    map<string, google.protobuf.Empty> map2_item_empty = 46 [(redact.custom).element.item.message.empty = true];
}

message RepeatedM {
    repeated float floats = 1 [(redact.redact) = true];
    repeated float float_custom_empties = 2 [(redact.custom).element.empty = true];
    repeated float float_custom_nested = 3 [(redact.custom).element.nested = true];
    repeated float float_customs = 4 [(redact.custom).element.item.float = 3.2];

    repeated double doubles = 5 [(redact.redact) = true];
    repeated double double_custom_empties = 6 [(redact.custom).element.empty = true];
    repeated double double_custom_nested = 7 [(redact.custom).element.nested = true];
    repeated double double_customs = 8 [(redact.custom).element.item.double = 6.4];

    repeated int32 int32s = 9 [(redact.redact) = true];
    repeated int32 int32_custom_empties = 10 [(redact.custom).element.empty = true];
    repeated int32 int32_custom_nested = 11 [(redact.custom).element.nested = true];
    repeated int32 int32_customs = 12 [(redact.custom).element.item.int32 = 32];

    repeated int64 int64s = 13 [(redact.redact) = true];
    repeated int64 int64_custom_empties = 14 [(redact.custom).element.empty = true];
    repeated int64 int64_custom_nested = 15 [(redact.custom).element.nested = true];
    repeated int64 int64_customs = 16 [(redact.custom).element.item.int64 = 64];

    repeated uint32 uint32s = 17 [(redact.redact) = true];
    repeated uint32 uint32_custom_empties = 18 [(redact.custom).element.empty = true];
    repeated uint32 uint32_custom_nested = 19 [(redact.custom).element.nested = true];
    repeated uint32 uint32_customs = 20 [(redact.custom).element.item.uint32 = 32];

    repeated uint64 uint64s = 21 [(redact.redact) = true];
    repeated uint64 uint64_custom_empties = 22 [(redact.custom).element.empty = true];
    repeated uint64 uint64_custom_nested = 23 [(redact.custom).element.nested = true];
    repeated uint64 uint64_customs = 24 [(redact.custom).element.item.uint64 = 64];

    repeated sint32 sint32s = 25 [(redact.redact) = true];
    repeated sint32 sint32_custom_empties = 26 [(redact.custom).element.empty = true];
    repeated sint32 sint32_custom_nested = 27 [(redact.custom).element.nested = true];
    repeated sint32 sint32_customs = 28 [(redact.custom).element.item.sint32 = 32];

    repeated sint64 sint64s = 29 [(redact.redact) = true];
    repeated sint64 sint64_custom_empties = 30 [(redact.custom).element.empty = true];
    repeated sint64 sint64_custom_nested = 31 [(redact.custom).element.nested = true];
    repeated sint64 sint64_customs = 32 [(redact.custom).element.item.sint64 = 64];

    repeated fixed32 fixed32s = 33 [(redact.redact) = true];
    repeated fixed32 fixed32_custom_empties = 34 [(redact.custom).element.empty = true];
    repeated fixed32 fixed32_custom_nested = 35 [(redact.custom).element.nested = true];
    repeated fixed32 fixed32_customs = 36 [(redact.custom).element.item.fixed32 = 32];

    repeated fixed64 fixed64s = 37 [(redact.redact) = true];
    repeated fixed64 fixed64_custom_empties = 38 [(redact.custom).element.empty = true];
    repeated fixed64 fixed64_custom_nested = 39 [(redact.custom).element.nested = true];
    repeated fixed64 fixed64_customs = 40 [(redact.custom).element.item.fixed64 = 64];

    repeated sfixed32 sfixed32s = 41 [(redact.redact) = true];
    repeated sfixed32 sfixed32_custom_empties = 42 [(redact.custom).element.empty = true];
    repeated sfixed32 sfixed32_custom_nested = 43 [(redact.custom).element.nested = true];
    repeated sfixed32 sfixed32_customs = 44 [(redact.custom).element.item.sfixed32 = 32];

    repeated sfixed64 sfixed64s = 45 [(redact.redact) = true];
    repeated sfixed64 sfixed64_custom_empties = 46 [(redact.custom).element.empty = true];
    repeated sfixed64 sfixed64_custom_nested = 47 [(redact.custom).element.nested = true];
    repeated sfixed64 sfixed64_customs = 48 [(redact.custom).element.item.sfixed64 = 64];

    repeated bool bools = 49 [(redact.redact) = true];
    repeated bool bool_custom_empties = 50 [(redact.custom).element.empty = true];
    repeated bool bool_custom_nested = 51 [(redact.custom).element.nested = true];
    repeated bool bool_customs = 52 [(redact.custom).element.item.bool = true];

    repeated string strings = 53 [(redact.redact) = true];
    repeated string string_custom_empties = 54 [(redact.custom).element.empty = true];
    repeated string string_custom_nested = 55 [(redact.custom).element.nested = true];
    repeated string string_customs = 56 [(redact.custom).element.item.string = "redacted-custom-value"];

    repeated bytes bytess = 57 [(redact.redact) = true];
    repeated bytes bytes_custom_empties = 58 [(redact.custom).element.empty = true];
    repeated bytes bytes_custom_nested = 59 [(redact.custom).element.nested = true];
    repeated bytes bytes_customs = 60 [(redact.custom).element.item.bytes = "redacted-custom-value"];

    repeated TestEnum enums = 61 [(redact.redact) = true];
    repeated TestEnum enum_custom_empties = 62 [(redact.custom).element.empty = true];
    repeated TestEnum enum_custom_nested = 63 [(redact.custom).element.nested = true];
    repeated TestEnum enum_customs = 64 [(redact.custom).element.item.enum = 2];

    repeated TestMessage messages = 65 [(redact.redact) = true];
    repeated TestMessage message_nils = 66 [(redact.custom).element.item.message.nil = true];
    repeated TestMessage message_skips = 67 [(redact.custom).element.item.message.skip = true];
    repeated TestMessage message_nested = 68 [(redact.custom).element.item.message.apply = true];
    repeated TestMessage message_empties = 69 [(redact.custom).element.item.message.empty = true];
}
