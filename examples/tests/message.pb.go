// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.9.1
// source: examples/tests/message.proto

package tests

import (
	_ "github.com/Shivam010/protoc-gen-redact/redact"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TestEnum int32

const (
	TestEnum_ValueZero TestEnum = 0
	TestEnum_ValueOne  TestEnum = 1
	TestEnum_ValueTwo  TestEnum = 2
)

// Enum value maps for TestEnum.
var (
	TestEnum_name = map[int32]string{
		0: "ValueZero",
		1: "ValueOne",
		2: "ValueTwo",
	}
	TestEnum_value = map[string]int32{
		"ValueZero": 0,
		"ValueOne":  1,
		"ValueTwo":  2,
	}
)

func (x TestEnum) Enum() *TestEnum {
	p := new(TestEnum)
	*p = x
	return p
}

func (x TestEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_examples_tests_message_proto_enumTypes[0].Descriptor()
}

func (TestEnum) Type() protoreflect.EnumType {
	return &file_examples_tests_message_proto_enumTypes[0]
}

func (x TestEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestEnum.Descriptor instead.
func (TestEnum) EnumDescriptor() ([]byte, []int) {
	return file_examples_tests_message_proto_rawDescGZIP(), []int{0}
}

type TestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Float          float32                 `protobuf:"fixed32,1,opt,name=float,proto3" json:"float,omitempty"`
	FloatCustom    float32                 `protobuf:"fixed32,2,opt,name=float_custom,json=floatCustom,proto3" json:"float_custom,omitempty"`
	Double         float64                 `protobuf:"fixed64,3,opt,name=double,proto3" json:"double,omitempty"`
	DoubleCustom   float64                 `protobuf:"fixed64,4,opt,name=double_custom,json=doubleCustom,proto3" json:"double_custom,omitempty"`
	Int32          int32                   `protobuf:"varint,5,opt,name=int32,proto3" json:"int32,omitempty"`
	Int32Custom    int32                   `protobuf:"varint,6,opt,name=int32_custom,json=int32Custom,proto3" json:"int32_custom,omitempty"`
	Int64          int64                   `protobuf:"varint,7,opt,name=int64,proto3" json:"int64,omitempty"`
	Int64Custom    int64                   `protobuf:"varint,8,opt,name=int64_custom,json=int64Custom,proto3" json:"int64_custom,omitempty"`
	Uint32         uint32                  `protobuf:"varint,9,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Uint32Custom   uint32                  `protobuf:"varint,10,opt,name=uint32_custom,json=uint32Custom,proto3" json:"uint32_custom,omitempty"`
	Uint64         uint64                  `protobuf:"varint,11,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Uint64Custom   uint64                  `protobuf:"varint,12,opt,name=uint64_custom,json=uint64Custom,proto3" json:"uint64_custom,omitempty"`
	Sint32         int32                   `protobuf:"zigzag32,13,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sint32Custom   int32                   `protobuf:"zigzag32,14,opt,name=sint32_custom,json=sint32Custom,proto3" json:"sint32_custom,omitempty"`
	Sint64         int64                   `protobuf:"zigzag64,15,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Sint64Custom   int64                   `protobuf:"zigzag64,16,opt,name=sint64_custom,json=sint64Custom,proto3" json:"sint64_custom,omitempty"`
	Fixed32        uint32                  `protobuf:"fixed32,17,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Fixed32Custom  uint32                  `protobuf:"fixed32,18,opt,name=fixed32_custom,json=fixed32Custom,proto3" json:"fixed32_custom,omitempty"`
	Fixed64        uint64                  `protobuf:"fixed64,19,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Fixed64Custom  uint64                  `protobuf:"fixed64,20,opt,name=fixed64_custom,json=fixed64Custom,proto3" json:"fixed64_custom,omitempty"`
	Sfixed32       int32                   `protobuf:"fixed32,21,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Sfixed32Custom int32                   `protobuf:"fixed32,22,opt,name=sfixed32_custom,json=sfixed32Custom,proto3" json:"sfixed32_custom,omitempty"`
	Sfixed64       int64                   `protobuf:"fixed64,23,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	Sfixed64Custom int64                   `protobuf:"fixed64,24,opt,name=sfixed64_custom,json=sfixed64Custom,proto3" json:"sfixed64_custom,omitempty"`
	Bool           bool                    `protobuf:"varint,25,opt,name=bool,proto3" json:"bool,omitempty"`
	BoolCustom     bool                    `protobuf:"varint,26,opt,name=bool_custom,json=boolCustom,proto3" json:"bool_custom,omitempty"`
	String_        string                  `protobuf:"bytes,27,opt,name=string,proto3" json:"string,omitempty"`
	StringCustom   string                  `protobuf:"bytes,28,opt,name=string_custom,json=stringCustom,proto3" json:"string_custom,omitempty"`
	Bytes          []byte                  `protobuf:"bytes,29,opt,name=bytes,proto3" json:"bytes,omitempty"`
	BytesCustom    []byte                  `protobuf:"bytes,30,opt,name=bytes_custom,json=bytesCustom,proto3" json:"bytes_custom,omitempty"`
	Enum           TestEnum                `protobuf:"varint,31,opt,name=enum,proto3,enum=tests.TestEnum" json:"enum,omitempty"`
	EnumCustom     TestEnum                `protobuf:"varint,32,opt,name=enum_custom,json=enumCustom,proto3,enum=tests.TestEnum" json:"enum_custom,omitempty"`
	Message        *TestMessage            `protobuf:"bytes,33,opt,name=message,proto3" json:"message,omitempty"`
	MessageNil     *TestMessage            `protobuf:"bytes,34,opt,name=message_nil,json=messageNil,proto3" json:"message_nil,omitempty"`
	MessageSkip    *TestMessage            `protobuf:"bytes,35,opt,name=message_skip,json=messageSkip,proto3" json:"message_skip,omitempty"`
	MessageEmpty   *TestMessage            `protobuf:"bytes,36,opt,name=message_empty,json=messageEmpty,proto3" json:"message_empty,omitempty"`
	Map1           map[int64]string        `protobuf:"bytes,37,rep,name=map1,proto3" json:"map1,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2           map[string]*empty.Empty `protobuf:"bytes,38,rep,name=map2,proto3" json:"map2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map1Empty      map[int64]string        `protobuf:"bytes,39,rep,name=map1_empty,json=map1Empty,proto3" json:"map1_empty,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2Empty      map[string]*empty.Empty `protobuf:"bytes,40,rep,name=map2_empty,json=map2Empty,proto3" json:"map2_empty,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map1Nested     map[int64]string        `protobuf:"bytes,41,rep,name=map1_nested,json=map1Nested,proto3" json:"map1_nested,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2Nested     map[string]*empty.Empty `protobuf:"bytes,42,rep,name=map2_nested,json=map2Nested,proto3" json:"map2_nested,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map1Item       map[int64]string        `protobuf:"bytes,43,rep,name=map1_item,json=map1Item,proto3" json:"map1_item,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2ItemNil    map[string]*empty.Empty `protobuf:"bytes,44,rep,name=map2_item_nil,json=map2ItemNil,proto3" json:"map2_item_nil,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2ItemSkip   map[string]*empty.Empty `protobuf:"bytes,45,rep,name=map2_item_skip,json=map2ItemSkip,proto3" json:"map2_item_skip,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2ItemEmpty  map[string]*empty.Empty `protobuf:"bytes,46,rep,name=map2_item_empty,json=map2ItemEmpty,proto3" json:"map2_item_empty,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_tests_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_examples_tests_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_examples_tests_message_proto_rawDescGZIP(), []int{0}
}

func (x *TestMessage) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *TestMessage) GetFloatCustom() float32 {
	if x != nil {
		return x.FloatCustom
	}
	return 0
}

func (x *TestMessage) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *TestMessage) GetDoubleCustom() float64 {
	if x != nil {
		return x.DoubleCustom
	}
	return 0
}

func (x *TestMessage) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *TestMessage) GetInt32Custom() int32 {
	if x != nil {
		return x.Int32Custom
	}
	return 0
}

func (x *TestMessage) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *TestMessage) GetInt64Custom() int64 {
	if x != nil {
		return x.Int64Custom
	}
	return 0
}

func (x *TestMessage) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *TestMessage) GetUint32Custom() uint32 {
	if x != nil {
		return x.Uint32Custom
	}
	return 0
}

func (x *TestMessage) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *TestMessage) GetUint64Custom() uint64 {
	if x != nil {
		return x.Uint64Custom
	}
	return 0
}

func (x *TestMessage) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *TestMessage) GetSint32Custom() int32 {
	if x != nil {
		return x.Sint32Custom
	}
	return 0
}

func (x *TestMessage) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *TestMessage) GetSint64Custom() int64 {
	if x != nil {
		return x.Sint64Custom
	}
	return 0
}

func (x *TestMessage) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *TestMessage) GetFixed32Custom() uint32 {
	if x != nil {
		return x.Fixed32Custom
	}
	return 0
}

func (x *TestMessage) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *TestMessage) GetFixed64Custom() uint64 {
	if x != nil {
		return x.Fixed64Custom
	}
	return 0
}

func (x *TestMessage) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *TestMessage) GetSfixed32Custom() int32 {
	if x != nil {
		return x.Sfixed32Custom
	}
	return 0
}

func (x *TestMessage) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *TestMessage) GetSfixed64Custom() int64 {
	if x != nil {
		return x.Sfixed64Custom
	}
	return 0
}

func (x *TestMessage) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *TestMessage) GetBoolCustom() bool {
	if x != nil {
		return x.BoolCustom
	}
	return false
}

func (x *TestMessage) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *TestMessage) GetStringCustom() string {
	if x != nil {
		return x.StringCustom
	}
	return ""
}

func (x *TestMessage) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *TestMessage) GetBytesCustom() []byte {
	if x != nil {
		return x.BytesCustom
	}
	return nil
}

func (x *TestMessage) GetEnum() TestEnum {
	if x != nil {
		return x.Enum
	}
	return TestEnum_ValueZero
}

func (x *TestMessage) GetEnumCustom() TestEnum {
	if x != nil {
		return x.EnumCustom
	}
	return TestEnum_ValueZero
}

func (x *TestMessage) GetMessage() *TestMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TestMessage) GetMessageNil() *TestMessage {
	if x != nil {
		return x.MessageNil
	}
	return nil
}

func (x *TestMessage) GetMessageSkip() *TestMessage {
	if x != nil {
		return x.MessageSkip
	}
	return nil
}

func (x *TestMessage) GetMessageEmpty() *TestMessage {
	if x != nil {
		return x.MessageEmpty
	}
	return nil
}

func (x *TestMessage) GetMap1() map[int64]string {
	if x != nil {
		return x.Map1
	}
	return nil
}

func (x *TestMessage) GetMap2() map[string]*empty.Empty {
	if x != nil {
		return x.Map2
	}
	return nil
}

func (x *TestMessage) GetMap1Empty() map[int64]string {
	if x != nil {
		return x.Map1Empty
	}
	return nil
}

func (x *TestMessage) GetMap2Empty() map[string]*empty.Empty {
	if x != nil {
		return x.Map2Empty
	}
	return nil
}

func (x *TestMessage) GetMap1Nested() map[int64]string {
	if x != nil {
		return x.Map1Nested
	}
	return nil
}

func (x *TestMessage) GetMap2Nested() map[string]*empty.Empty {
	if x != nil {
		return x.Map2Nested
	}
	return nil
}

func (x *TestMessage) GetMap1Item() map[int64]string {
	if x != nil {
		return x.Map1Item
	}
	return nil
}

func (x *TestMessage) GetMap2ItemNil() map[string]*empty.Empty {
	if x != nil {
		return x.Map2ItemNil
	}
	return nil
}

func (x *TestMessage) GetMap2ItemSkip() map[string]*empty.Empty {
	if x != nil {
		return x.Map2ItemSkip
	}
	return nil
}

func (x *TestMessage) GetMap2ItemEmpty() map[string]*empty.Empty {
	if x != nil {
		return x.Map2ItemEmpty
	}
	return nil
}

type RepeatedM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Floats                []float32      `protobuf:"fixed32,1,rep,packed,name=floats,proto3" json:"floats,omitempty"`
	FloatCustomEmpties    []float32      `protobuf:"fixed32,2,rep,packed,name=float_custom_empties,json=floatCustomEmpties,proto3" json:"float_custom_empties,omitempty"`
	FloatCustomNested     []float32      `protobuf:"fixed32,3,rep,packed,name=float_custom_nested,json=floatCustomNested,proto3" json:"float_custom_nested,omitempty"`
	FloatCustoms          []float32      `protobuf:"fixed32,4,rep,packed,name=float_customs,json=floatCustoms,proto3" json:"float_customs,omitempty"`
	Doubles               []float64      `protobuf:"fixed64,5,rep,packed,name=doubles,proto3" json:"doubles,omitempty"`
	DoubleCustomEmpties   []float64      `protobuf:"fixed64,6,rep,packed,name=double_custom_empties,json=doubleCustomEmpties,proto3" json:"double_custom_empties,omitempty"`
	DoubleCustomNested    []float64      `protobuf:"fixed64,7,rep,packed,name=double_custom_nested,json=doubleCustomNested,proto3" json:"double_custom_nested,omitempty"`
	DoubleCustoms         []float64      `protobuf:"fixed64,8,rep,packed,name=double_customs,json=doubleCustoms,proto3" json:"double_customs,omitempty"`
	Int32S                []int32        `protobuf:"varint,9,rep,packed,name=int32s,proto3" json:"int32s,omitempty"`
	Int32CustomEmpties    []int32        `protobuf:"varint,10,rep,packed,name=int32_custom_empties,json=int32CustomEmpties,proto3" json:"int32_custom_empties,omitempty"`
	Int32CustomNested     []int32        `protobuf:"varint,11,rep,packed,name=int32_custom_nested,json=int32CustomNested,proto3" json:"int32_custom_nested,omitempty"`
	Int32Customs          []int32        `protobuf:"varint,12,rep,packed,name=int32_customs,json=int32Customs,proto3" json:"int32_customs,omitempty"`
	Int64S                []int64        `protobuf:"varint,13,rep,packed,name=int64s,proto3" json:"int64s,omitempty"`
	Int64CustomEmpties    []int64        `protobuf:"varint,14,rep,packed,name=int64_custom_empties,json=int64CustomEmpties,proto3" json:"int64_custom_empties,omitempty"`
	Int64CustomNested     []int64        `protobuf:"varint,15,rep,packed,name=int64_custom_nested,json=int64CustomNested,proto3" json:"int64_custom_nested,omitempty"`
	Int64Customs          []int64        `protobuf:"varint,16,rep,packed,name=int64_customs,json=int64Customs,proto3" json:"int64_customs,omitempty"`
	Uint32S               []uint32       `protobuf:"varint,17,rep,packed,name=uint32s,proto3" json:"uint32s,omitempty"`
	Uint32CustomEmpties   []uint32       `protobuf:"varint,18,rep,packed,name=uint32_custom_empties,json=uint32CustomEmpties,proto3" json:"uint32_custom_empties,omitempty"`
	Uint32CustomNested    []uint32       `protobuf:"varint,19,rep,packed,name=uint32_custom_nested,json=uint32CustomNested,proto3" json:"uint32_custom_nested,omitempty"`
	Uint32Customs         []uint32       `protobuf:"varint,20,rep,packed,name=uint32_customs,json=uint32Customs,proto3" json:"uint32_customs,omitempty"`
	Uint64S               []uint64       `protobuf:"varint,21,rep,packed,name=uint64s,proto3" json:"uint64s,omitempty"`
	Uint64CustomEmpties   []uint64       `protobuf:"varint,22,rep,packed,name=uint64_custom_empties,json=uint64CustomEmpties,proto3" json:"uint64_custom_empties,omitempty"`
	Uint64CustomNested    []uint64       `protobuf:"varint,23,rep,packed,name=uint64_custom_nested,json=uint64CustomNested,proto3" json:"uint64_custom_nested,omitempty"`
	Uint64Customs         []uint64       `protobuf:"varint,24,rep,packed,name=uint64_customs,json=uint64Customs,proto3" json:"uint64_customs,omitempty"`
	Sint32S               []int32        `protobuf:"zigzag32,25,rep,packed,name=sint32s,proto3" json:"sint32s,omitempty"`
	Sint32CustomEmpties   []int32        `protobuf:"zigzag32,26,rep,packed,name=sint32_custom_empties,json=sint32CustomEmpties,proto3" json:"sint32_custom_empties,omitempty"`
	Sint32CustomNested    []int32        `protobuf:"zigzag32,27,rep,packed,name=sint32_custom_nested,json=sint32CustomNested,proto3" json:"sint32_custom_nested,omitempty"`
	Sint32Customs         []int32        `protobuf:"zigzag32,28,rep,packed,name=sint32_customs,json=sint32Customs,proto3" json:"sint32_customs,omitempty"`
	Sint64S               []int64        `protobuf:"zigzag64,29,rep,packed,name=sint64s,proto3" json:"sint64s,omitempty"`
	Sint64CustomEmpties   []int64        `protobuf:"zigzag64,30,rep,packed,name=sint64_custom_empties,json=sint64CustomEmpties,proto3" json:"sint64_custom_empties,omitempty"`
	Sint64CustomNested    []int64        `protobuf:"zigzag64,31,rep,packed,name=sint64_custom_nested,json=sint64CustomNested,proto3" json:"sint64_custom_nested,omitempty"`
	Sint64Customs         []int64        `protobuf:"zigzag64,32,rep,packed,name=sint64_customs,json=sint64Customs,proto3" json:"sint64_customs,omitempty"`
	Fixed32S              []uint32       `protobuf:"fixed32,33,rep,packed,name=fixed32s,proto3" json:"fixed32s,omitempty"`
	Fixed32CustomEmpties  []uint32       `protobuf:"fixed32,34,rep,packed,name=fixed32_custom_empties,json=fixed32CustomEmpties,proto3" json:"fixed32_custom_empties,omitempty"`
	Fixed32CustomNested   []uint32       `protobuf:"fixed32,35,rep,packed,name=fixed32_custom_nested,json=fixed32CustomNested,proto3" json:"fixed32_custom_nested,omitempty"`
	Fixed32Customs        []uint32       `protobuf:"fixed32,36,rep,packed,name=fixed32_customs,json=fixed32Customs,proto3" json:"fixed32_customs,omitempty"`
	Fixed64S              []uint64       `protobuf:"fixed64,37,rep,packed,name=fixed64s,proto3" json:"fixed64s,omitempty"`
	Fixed64CustomEmpties  []uint64       `protobuf:"fixed64,38,rep,packed,name=fixed64_custom_empties,json=fixed64CustomEmpties,proto3" json:"fixed64_custom_empties,omitempty"`
	Fixed64CustomNested   []uint64       `protobuf:"fixed64,39,rep,packed,name=fixed64_custom_nested,json=fixed64CustomNested,proto3" json:"fixed64_custom_nested,omitempty"`
	Fixed64Customs        []uint64       `protobuf:"fixed64,40,rep,packed,name=fixed64_customs,json=fixed64Customs,proto3" json:"fixed64_customs,omitempty"`
	Sfixed32S             []int32        `protobuf:"fixed32,41,rep,packed,name=sfixed32s,proto3" json:"sfixed32s,omitempty"`
	Sfixed32CustomEmpties []int32        `protobuf:"fixed32,42,rep,packed,name=sfixed32_custom_empties,json=sfixed32CustomEmpties,proto3" json:"sfixed32_custom_empties,omitempty"`
	Sfixed32CustomNested  []int32        `protobuf:"fixed32,43,rep,packed,name=sfixed32_custom_nested,json=sfixed32CustomNested,proto3" json:"sfixed32_custom_nested,omitempty"`
	Sfixed32Customs       []int32        `protobuf:"fixed32,44,rep,packed,name=sfixed32_customs,json=sfixed32Customs,proto3" json:"sfixed32_customs,omitempty"`
	Sfixed64S             []int64        `protobuf:"fixed64,45,rep,packed,name=sfixed64s,proto3" json:"sfixed64s,omitempty"`
	Sfixed64CustomEmpties []int64        `protobuf:"fixed64,46,rep,packed,name=sfixed64_custom_empties,json=sfixed64CustomEmpties,proto3" json:"sfixed64_custom_empties,omitempty"`
	Sfixed64CustomNested  []int64        `protobuf:"fixed64,47,rep,packed,name=sfixed64_custom_nested,json=sfixed64CustomNested,proto3" json:"sfixed64_custom_nested,omitempty"`
	Sfixed64Customs       []int64        `protobuf:"fixed64,48,rep,packed,name=sfixed64_customs,json=sfixed64Customs,proto3" json:"sfixed64_customs,omitempty"`
	Bools                 []bool         `protobuf:"varint,49,rep,packed,name=bools,proto3" json:"bools,omitempty"`
	BoolCustomEmpties     []bool         `protobuf:"varint,50,rep,packed,name=bool_custom_empties,json=boolCustomEmpties,proto3" json:"bool_custom_empties,omitempty"`
	BoolCustomNested      []bool         `protobuf:"varint,51,rep,packed,name=bool_custom_nested,json=boolCustomNested,proto3" json:"bool_custom_nested,omitempty"`
	BoolCustoms           []bool         `protobuf:"varint,52,rep,packed,name=bool_customs,json=boolCustoms,proto3" json:"bool_customs,omitempty"`
	Strings               []string       `protobuf:"bytes,53,rep,name=strings,proto3" json:"strings,omitempty"`
	StringCustomEmpties   []string       `protobuf:"bytes,54,rep,name=string_custom_empties,json=stringCustomEmpties,proto3" json:"string_custom_empties,omitempty"`
	StringCustomNested    []string       `protobuf:"bytes,55,rep,name=string_custom_nested,json=stringCustomNested,proto3" json:"string_custom_nested,omitempty"`
	StringCustoms         []string       `protobuf:"bytes,56,rep,name=string_customs,json=stringCustoms,proto3" json:"string_customs,omitempty"`
	Bytess                [][]byte       `protobuf:"bytes,57,rep,name=bytess,proto3" json:"bytess,omitempty"`
	BytesCustomEmpties    [][]byte       `protobuf:"bytes,58,rep,name=bytes_custom_empties,json=bytesCustomEmpties,proto3" json:"bytes_custom_empties,omitempty"`
	BytesCustomNested     [][]byte       `protobuf:"bytes,59,rep,name=bytes_custom_nested,json=bytesCustomNested,proto3" json:"bytes_custom_nested,omitempty"`
	BytesCustoms          [][]byte       `protobuf:"bytes,60,rep,name=bytes_customs,json=bytesCustoms,proto3" json:"bytes_customs,omitempty"`
	Enums                 []TestEnum     `protobuf:"varint,61,rep,packed,name=enums,proto3,enum=tests.TestEnum" json:"enums,omitempty"`
	EnumCustomEmpties     []TestEnum     `protobuf:"varint,62,rep,packed,name=enum_custom_empties,json=enumCustomEmpties,proto3,enum=tests.TestEnum" json:"enum_custom_empties,omitempty"`
	EnumCustomNested      []TestEnum     `protobuf:"varint,63,rep,packed,name=enum_custom_nested,json=enumCustomNested,proto3,enum=tests.TestEnum" json:"enum_custom_nested,omitempty"`
	EnumCustoms           []TestEnum     `protobuf:"varint,64,rep,packed,name=enum_customs,json=enumCustoms,proto3,enum=tests.TestEnum" json:"enum_customs,omitempty"`
	Messages              []*TestMessage `protobuf:"bytes,65,rep,name=messages,proto3" json:"messages,omitempty"`
	MessageNils           []*TestMessage `protobuf:"bytes,66,rep,name=message_nils,json=messageNils,proto3" json:"message_nils,omitempty"`
	MessageSkips          []*TestMessage `protobuf:"bytes,67,rep,name=message_skips,json=messageSkips,proto3" json:"message_skips,omitempty"`
	MessageNested         []*TestMessage `protobuf:"bytes,68,rep,name=message_nested,json=messageNested,proto3" json:"message_nested,omitempty"`
	MessageEmpties        []*TestMessage `protobuf:"bytes,69,rep,name=message_empties,json=messageEmpties,proto3" json:"message_empties,omitempty"`
}

func (x *RepeatedM) Reset() {
	*x = RepeatedM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_examples_tests_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedM) ProtoMessage() {}

func (x *RepeatedM) ProtoReflect() protoreflect.Message {
	mi := &file_examples_tests_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedM.ProtoReflect.Descriptor instead.
func (*RepeatedM) Descriptor() ([]byte, []int) {
	return file_examples_tests_message_proto_rawDescGZIP(), []int{1}
}

func (x *RepeatedM) GetFloats() []float32 {
	if x != nil {
		return x.Floats
	}
	return nil
}

func (x *RepeatedM) GetFloatCustomEmpties() []float32 {
	if x != nil {
		return x.FloatCustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetFloatCustomNested() []float32 {
	if x != nil {
		return x.FloatCustomNested
	}
	return nil
}

func (x *RepeatedM) GetFloatCustoms() []float32 {
	if x != nil {
		return x.FloatCustoms
	}
	return nil
}

func (x *RepeatedM) GetDoubles() []float64 {
	if x != nil {
		return x.Doubles
	}
	return nil
}

func (x *RepeatedM) GetDoubleCustomEmpties() []float64 {
	if x != nil {
		return x.DoubleCustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetDoubleCustomNested() []float64 {
	if x != nil {
		return x.DoubleCustomNested
	}
	return nil
}

func (x *RepeatedM) GetDoubleCustoms() []float64 {
	if x != nil {
		return x.DoubleCustoms
	}
	return nil
}

func (x *RepeatedM) GetInt32S() []int32 {
	if x != nil {
		return x.Int32S
	}
	return nil
}

func (x *RepeatedM) GetInt32CustomEmpties() []int32 {
	if x != nil {
		return x.Int32CustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetInt32CustomNested() []int32 {
	if x != nil {
		return x.Int32CustomNested
	}
	return nil
}

func (x *RepeatedM) GetInt32Customs() []int32 {
	if x != nil {
		return x.Int32Customs
	}
	return nil
}

func (x *RepeatedM) GetInt64S() []int64 {
	if x != nil {
		return x.Int64S
	}
	return nil
}

func (x *RepeatedM) GetInt64CustomEmpties() []int64 {
	if x != nil {
		return x.Int64CustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetInt64CustomNested() []int64 {
	if x != nil {
		return x.Int64CustomNested
	}
	return nil
}

func (x *RepeatedM) GetInt64Customs() []int64 {
	if x != nil {
		return x.Int64Customs
	}
	return nil
}

func (x *RepeatedM) GetUint32S() []uint32 {
	if x != nil {
		return x.Uint32S
	}
	return nil
}

func (x *RepeatedM) GetUint32CustomEmpties() []uint32 {
	if x != nil {
		return x.Uint32CustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetUint32CustomNested() []uint32 {
	if x != nil {
		return x.Uint32CustomNested
	}
	return nil
}

func (x *RepeatedM) GetUint32Customs() []uint32 {
	if x != nil {
		return x.Uint32Customs
	}
	return nil
}

func (x *RepeatedM) GetUint64S() []uint64 {
	if x != nil {
		return x.Uint64S
	}
	return nil
}

func (x *RepeatedM) GetUint64CustomEmpties() []uint64 {
	if x != nil {
		return x.Uint64CustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetUint64CustomNested() []uint64 {
	if x != nil {
		return x.Uint64CustomNested
	}
	return nil
}

func (x *RepeatedM) GetUint64Customs() []uint64 {
	if x != nil {
		return x.Uint64Customs
	}
	return nil
}

func (x *RepeatedM) GetSint32S() []int32 {
	if x != nil {
		return x.Sint32S
	}
	return nil
}

func (x *RepeatedM) GetSint32CustomEmpties() []int32 {
	if x != nil {
		return x.Sint32CustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetSint32CustomNested() []int32 {
	if x != nil {
		return x.Sint32CustomNested
	}
	return nil
}

func (x *RepeatedM) GetSint32Customs() []int32 {
	if x != nil {
		return x.Sint32Customs
	}
	return nil
}

func (x *RepeatedM) GetSint64S() []int64 {
	if x != nil {
		return x.Sint64S
	}
	return nil
}

func (x *RepeatedM) GetSint64CustomEmpties() []int64 {
	if x != nil {
		return x.Sint64CustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetSint64CustomNested() []int64 {
	if x != nil {
		return x.Sint64CustomNested
	}
	return nil
}

func (x *RepeatedM) GetSint64Customs() []int64 {
	if x != nil {
		return x.Sint64Customs
	}
	return nil
}

func (x *RepeatedM) GetFixed32S() []uint32 {
	if x != nil {
		return x.Fixed32S
	}
	return nil
}

func (x *RepeatedM) GetFixed32CustomEmpties() []uint32 {
	if x != nil {
		return x.Fixed32CustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetFixed32CustomNested() []uint32 {
	if x != nil {
		return x.Fixed32CustomNested
	}
	return nil
}

func (x *RepeatedM) GetFixed32Customs() []uint32 {
	if x != nil {
		return x.Fixed32Customs
	}
	return nil
}

func (x *RepeatedM) GetFixed64S() []uint64 {
	if x != nil {
		return x.Fixed64S
	}
	return nil
}

func (x *RepeatedM) GetFixed64CustomEmpties() []uint64 {
	if x != nil {
		return x.Fixed64CustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetFixed64CustomNested() []uint64 {
	if x != nil {
		return x.Fixed64CustomNested
	}
	return nil
}

func (x *RepeatedM) GetFixed64Customs() []uint64 {
	if x != nil {
		return x.Fixed64Customs
	}
	return nil
}

func (x *RepeatedM) GetSfixed32S() []int32 {
	if x != nil {
		return x.Sfixed32S
	}
	return nil
}

func (x *RepeatedM) GetSfixed32CustomEmpties() []int32 {
	if x != nil {
		return x.Sfixed32CustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetSfixed32CustomNested() []int32 {
	if x != nil {
		return x.Sfixed32CustomNested
	}
	return nil
}

func (x *RepeatedM) GetSfixed32Customs() []int32 {
	if x != nil {
		return x.Sfixed32Customs
	}
	return nil
}

func (x *RepeatedM) GetSfixed64S() []int64 {
	if x != nil {
		return x.Sfixed64S
	}
	return nil
}

func (x *RepeatedM) GetSfixed64CustomEmpties() []int64 {
	if x != nil {
		return x.Sfixed64CustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetSfixed64CustomNested() []int64 {
	if x != nil {
		return x.Sfixed64CustomNested
	}
	return nil
}

func (x *RepeatedM) GetSfixed64Customs() []int64 {
	if x != nil {
		return x.Sfixed64Customs
	}
	return nil
}

func (x *RepeatedM) GetBools() []bool {
	if x != nil {
		return x.Bools
	}
	return nil
}

func (x *RepeatedM) GetBoolCustomEmpties() []bool {
	if x != nil {
		return x.BoolCustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetBoolCustomNested() []bool {
	if x != nil {
		return x.BoolCustomNested
	}
	return nil
}

func (x *RepeatedM) GetBoolCustoms() []bool {
	if x != nil {
		return x.BoolCustoms
	}
	return nil
}

func (x *RepeatedM) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *RepeatedM) GetStringCustomEmpties() []string {
	if x != nil {
		return x.StringCustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetStringCustomNested() []string {
	if x != nil {
		return x.StringCustomNested
	}
	return nil
}

func (x *RepeatedM) GetStringCustoms() []string {
	if x != nil {
		return x.StringCustoms
	}
	return nil
}

func (x *RepeatedM) GetBytess() [][]byte {
	if x != nil {
		return x.Bytess
	}
	return nil
}

func (x *RepeatedM) GetBytesCustomEmpties() [][]byte {
	if x != nil {
		return x.BytesCustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetBytesCustomNested() [][]byte {
	if x != nil {
		return x.BytesCustomNested
	}
	return nil
}

func (x *RepeatedM) GetBytesCustoms() [][]byte {
	if x != nil {
		return x.BytesCustoms
	}
	return nil
}

func (x *RepeatedM) GetEnums() []TestEnum {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *RepeatedM) GetEnumCustomEmpties() []TestEnum {
	if x != nil {
		return x.EnumCustomEmpties
	}
	return nil
}

func (x *RepeatedM) GetEnumCustomNested() []TestEnum {
	if x != nil {
		return x.EnumCustomNested
	}
	return nil
}

func (x *RepeatedM) GetEnumCustoms() []TestEnum {
	if x != nil {
		return x.EnumCustoms
	}
	return nil
}

func (x *RepeatedM) GetMessages() []*TestMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *RepeatedM) GetMessageNils() []*TestMessage {
	if x != nil {
		return x.MessageNils
	}
	return nil
}

func (x *RepeatedM) GetMessageSkips() []*TestMessage {
	if x != nil {
		return x.MessageSkips
	}
	return nil
}

func (x *RepeatedM) GetMessageNested() []*TestMessage {
	if x != nil {
		return x.MessageNested
	}
	return nil
}

func (x *RepeatedM) GetMessageEmpties() []*TestMessage {
	if x != nil {
		return x.MessageEmpties
	}
	return nil
}

var File_examples_tests_message_proto protoreflect.FileDescriptor

var file_examples_tests_message_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x13, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x2f, 0x72, 0x65,
	0x64, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x18, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0x15,
	0xcd, 0xcc, 0x4c, 0x40, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x12, 0x1c, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12,
	0x32, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0d, 0xe2, 0xb6, 0x1a, 0x09, 0x19, 0x9a, 0x99, 0x99,
	0x99, 0x99, 0x99, 0x19, 0x40, 0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x29, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xb6, 0x1a, 0x02, 0x20, 0x20, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x05, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52,
	0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xb6,
	0x1a, 0x02, 0x28, 0x40, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x12, 0x1c, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x2b, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xe2, 0xb6, 0x1a, 0x02, 0x30, 0x20, 0x52, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xd8, 0xb6,
	0x1a, 0x01, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2b, 0x0a, 0x0d, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xe2, 0xb6, 0x1a, 0x02, 0x38, 0x40, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x06, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x11, 0x42, 0x06, 0xe2, 0xb6,
	0x1a, 0x02, 0x40, 0x40, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x12, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x2c, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x12, 0x42, 0x07, 0xe2, 0xb6, 0x1a, 0x03, 0x48, 0x80, 0x01,
	0x52, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1e,
	0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x11, 0x20, 0x01, 0x28, 0x07, 0x42,
	0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x30,
	0x0a, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x07, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0x55, 0x20, 0x00, 0x00,
	0x00, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x12, 0x1e, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x34, 0x0a, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0d, 0xe2, 0xb6, 0x1a, 0x09, 0x59, 0x40,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x08,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x32, 0x0a, 0x0f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0f, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0x65, 0x20, 0x00, 0x00, 0x00, 0x52, 0x0e, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x08,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x17, 0x20, 0x01, 0x28, 0x10, 0x42, 0x04,
	0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x36,
	0x0a, 0x0f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0d, 0xe2, 0xb6, 0x1a, 0x09, 0x69, 0x40, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x12, 0x27, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xe2, 0xb6, 0x1a, 0x02, 0x70, 0x01, 0x52, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0xe2, 0xb6, 0x1a, 0x17, 0x7a, 0x15, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1c, 0xe2, 0xb6, 0x1a,
	0x18, 0x82, 0x01, 0x15, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x29, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x04, 0x65, 0x6e, 0x75,
	0x6d, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x07, 0xe2, 0xb6, 0x1a, 0x03, 0x88, 0x01, 0x02,
	0x52, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x69, 0x6c, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0x9a,
	0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x69, 0x6c,
	0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05,
	0x9a, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6b,
	0x69, 0x70, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0xe2,
	0xb6, 0x1a, 0x05, 0x9a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x61, 0x70, 0x31, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x31, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x70, 0x31, 0x12, 0x36,
	0x0a, 0x04, 0x6d, 0x61, 0x70, 0x32, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01,
	0x52, 0x04, 0x6d, 0x61, 0x70, 0x32, 0x12, 0x4b, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x31, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d,
	0x61, 0x70, 0x31, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xe2,
	0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x31, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x32, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x32,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05,
	0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x32, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x31, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x31, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x31, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x4e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x32, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x32, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x32, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x4b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x31, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x2b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x31, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0c, 0xe2, 0xb6, 0x1a, 0x08, 0xa2, 0x01, 0x05, 0x1a, 0x03,
	0x7a, 0x01, 0x33, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x31, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x57, 0x0a,
	0x0d, 0x6d, 0x61, 0x70, 0x32, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x69, 0x6c, 0x18, 0x2c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65,
	0x6d, 0x4e, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xe2, 0xb6, 0x1a, 0x0a, 0xa2,
	0x01, 0x07, 0x1a, 0x05, 0x9a, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x32, 0x49,
	0x74, 0x65, 0x6d, 0x4e, 0x69, 0x6c, 0x12, 0x5a, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x32, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xe2, 0xb6, 0x1a, 0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x9a,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6b,
	0x69, 0x70, 0x12, 0x5d, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x32, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x0e, 0xe2, 0xb6, 0x1a, 0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x9a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x09, 0x4d, 0x61,
	0x70, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d,
	0x61, 0x70, 0x31, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x4d, 0x61, 0x70,
	0x32, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x31, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55,
	0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x32, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x31, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x56, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x69,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x11, 0x4d, 0x61,
	0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x32, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x1d,
	0x0a, 0x09, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x12, 0x1c, 0x0a, 0x06, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x42, 0x04, 0xd8, 0xb6, 0x1a,
	0x01, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x12, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45,
	0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x02, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x33, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x42, 0x0e, 0xe2, 0xb6, 0x1a, 0x0a, 0xa2, 0x01,
	0x07, 0x1a, 0x05, 0x15, 0xcd, 0xcc, 0x4c, 0x40, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x07, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x15, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x01, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x13, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d,
	0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x01, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x01, 0x42, 0x12, 0xe2, 0xb6, 0x1a, 0x0e,
	0xa2, 0x01, 0x0b, 0x1a, 0x09, 0x19, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0x19, 0x40, 0x52, 0x0d,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x1c, 0x0a,
	0x06, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04, 0xd8,
	0xb6, 0x1a, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x05, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x11, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xb6, 0x1a, 0x07,
	0xa2, 0x01, 0x04, 0x1a, 0x02, 0x20, 0x20, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x03, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x03, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x12, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x42, 0x09, 0xe2,
	0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x03, 0x42, 0x0b, 0xe2, 0xb6, 0x1a, 0x07, 0xa2, 0x01, 0x04, 0x1a, 0x02, 0x28, 0x40, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x1e, 0x0a,
	0x07, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04,
	0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x3d, 0x0a,
	0x15, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x09, 0xe2, 0xb6,
	0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x14,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05,
	0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x0e, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x0b, 0xe2, 0xb6, 0x1a, 0x07, 0xa2, 0x01, 0x04, 0x1a, 0x02, 0x30, 0x20, 0x52, 0x0d,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x1e, 0x0a,
	0x07, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04,
	0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x12, 0x3d, 0x0a,
	0x15, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x04, 0x42, 0x09, 0xe2, 0xb6,
	0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x14,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28, 0x04, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05,
	0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x0e, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x04, 0x42, 0x0b, 0xe2, 0xb6, 0x1a, 0x07, 0xa2, 0x01, 0x04, 0x1a, 0x02, 0x38, 0x40, 0x52, 0x0d,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x1e, 0x0a,
	0x07, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x11, 0x42, 0x04,
	0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x3d, 0x0a,
	0x15, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x11, 0x42, 0x09, 0xe2, 0xb6,
	0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x13, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x14,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x11, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05,
	0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x0e, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x11, 0x42, 0x0b, 0xe2, 0xb6, 0x1a, 0x07, 0xa2, 0x01, 0x04, 0x1a, 0x02, 0x40, 0x40, 0x52, 0x0d,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x1e, 0x0a,
	0x07, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x12, 0x42, 0x04,
	0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x12, 0x3d, 0x0a,
	0x15, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x12, 0x42, 0x09, 0xe2, 0xb6,
	0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x13, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x14,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x12, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05,
	0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x12, 0x42, 0x0c, 0xe2, 0xb6, 0x1a, 0x08, 0xa2, 0x01, 0x05, 0x1a, 0x03, 0x48, 0x80, 0x01, 0x52,
	0x0d, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x20,
	0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x07,
	0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73,
	0x12, 0x3f, 0x0a, 0x16, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x07,
	0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x14, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x15, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x23, 0x20, 0x03, 0x28, 0x07,
	0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x37, 0x0a, 0x0f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x07, 0x42, 0x0e, 0xe2, 0xb6, 0x1a, 0x0a, 0xa2,
	0x01, 0x07, 0x1a, 0x05, 0x55, 0x20, 0x00, 0x00, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x08, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x06, 0x42, 0x04, 0xd8, 0xb6, 0x1a,
	0x01, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x12, 0x3f, 0x0a, 0x16, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x06, 0x42, 0x09, 0xe2, 0xb6, 0x1a,
	0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x14, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x15,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x27, 0x20, 0x03, 0x28, 0x06, 0x42, 0x09, 0xe2, 0xb6, 0x1a,
	0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x28,
	0x20, 0x03, 0x28, 0x06, 0x42, 0x12, 0xe2, 0xb6, 0x1a, 0x0e, 0xa2, 0x01, 0x0b, 0x1a, 0x09, 0x59,
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0f, 0x42, 0x04, 0xd8, 0xb6, 0x1a,
	0x01, 0x52, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x12, 0x41, 0x0a, 0x17,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0f, 0x42, 0x09, 0xe2,
	0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x15, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x16, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0f, 0x42,
	0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x14, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x39, 0x0a, 0x10, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0f, 0x42, 0x0e, 0xe2, 0xb6, 0x1a, 0x0a,
	0xa2, 0x01, 0x07, 0x1a, 0x05, 0x65, 0x20, 0x00, 0x00, 0x00, 0x52, 0x0f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x09, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x10, 0x42, 0x04,
	0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x12,
	0x41, 0x0a, 0x17, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x10,
	0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x15, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x3f, 0x0a, 0x16, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x2f, 0x20, 0x03,
	0x28, 0x10, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x14, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x10, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x30, 0x20, 0x03, 0x28, 0x10, 0x42, 0x12, 0xe2,
	0xb6, 0x1a, 0x0e, 0xa2, 0x01, 0x0b, 0x1a, 0x09, 0x69, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x52, 0x0f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x31, 0x20, 0x03, 0x28,
	0x08, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x39,
	0x0a, 0x13, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x08, 0x42, 0x09, 0xe2, 0xb6, 0x1a,
	0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x6c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x12, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x33, 0x20, 0x03, 0x28, 0x08, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x08, 0x42, 0x0b, 0xe2, 0xb6, 0x1a, 0x07, 0xa2, 0x01,
	0x04, 0x1a, 0x02, 0x70, 0x01, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x35, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3d, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x13, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x37, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x47,
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73,
	0x18, 0x38, 0x20, 0x03, 0x28, 0x09, 0x42, 0x20, 0xe2, 0xb6, 0x1a, 0x1c, 0xa2, 0x01, 0x19, 0x1a,
	0x17, 0x7a, 0x15, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x73, 0x18, 0x39, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x06, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x3a, 0x20,
	0x03, 0x28, 0x0c, 0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x12,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0c, 0x42,
	0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x46, 0x0a,
	0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x3c,
	0x20, 0x03, 0x28, 0x0c, 0x42, 0x21, 0xe2, 0xb6, 0x1a, 0x1d, 0xa2, 0x01, 0x1a, 0x1a, 0x18, 0x82,
	0x01, 0x15, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x3d,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x05, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d,
	0x42, 0x09, 0xe2, 0xb6, 0x1a, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x11, 0x65, 0x6e, 0x75,
	0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x12, 0x48,
	0x0a, 0x12, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x09, 0xe2, 0xb6, 0x1a,
	0x05, 0xa2, 0x01, 0x02, 0x10, 0x01, 0x52, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x40, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42,
	0x0c, 0xe2, 0xb6, 0x1a, 0x08, 0xa2, 0x01, 0x05, 0x1a, 0x03, 0x88, 0x01, 0x02, 0x52, 0x0b, 0x65,
	0x6e, 0x75, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x41, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x04, 0xd8, 0xb6, 0x1a, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x69, 0x6c, 0x73,
	0x18, 0x42, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0xe2, 0xb6, 0x1a, 0x0a,
	0xa2, 0x01, 0x07, 0x1a, 0x05, 0x9a, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x73, 0x18, 0x43, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x0e, 0xe2, 0xb6, 0x1a, 0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x9a, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x73,
	0x12, 0x49, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x44, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0xe2, 0xb6,
	0x1a, 0x0a, 0xa2, 0x01, 0x07, 0x1a, 0x05, 0x9a, 0x01, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x18, 0x45,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0xe2, 0xb6, 0x1a, 0x0a, 0xa2, 0x01,
	0x07, 0x1a, 0x05, 0x9a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x2a, 0x35, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5a, 0x65, 0x72,
	0x6f, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x6e, 0x65, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x77, 0x6f, 0x10, 0x02, 0x42,
	0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x68,
	0x69, 0x76, 0x61, 0x6d, 0x30, 0x31, 0x30, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_examples_tests_message_proto_rawDescOnce sync.Once
	file_examples_tests_message_proto_rawDescData = file_examples_tests_message_proto_rawDesc
)

func file_examples_tests_message_proto_rawDescGZIP() []byte {
	file_examples_tests_message_proto_rawDescOnce.Do(func() {
		file_examples_tests_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_examples_tests_message_proto_rawDescData)
	})
	return file_examples_tests_message_proto_rawDescData
}

var file_examples_tests_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_examples_tests_message_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_examples_tests_message_proto_goTypes = []interface{}{
	(TestEnum)(0),       // 0: tests.TestEnum
	(*TestMessage)(nil), // 1: tests.TestMessage
	(*RepeatedM)(nil),   // 2: tests.RepeatedM
	nil,                 // 3: tests.TestMessage.Map1Entry
	nil,                 // 4: tests.TestMessage.Map2Entry
	nil,                 // 5: tests.TestMessage.Map1EmptyEntry
	nil,                 // 6: tests.TestMessage.Map2EmptyEntry
	nil,                 // 7: tests.TestMessage.Map1NestedEntry
	nil,                 // 8: tests.TestMessage.Map2NestedEntry
	nil,                 // 9: tests.TestMessage.Map1ItemEntry
	nil,                 // 10: tests.TestMessage.Map2ItemNilEntry
	nil,                 // 11: tests.TestMessage.Map2ItemSkipEntry
	nil,                 // 12: tests.TestMessage.Map2ItemEmptyEntry
	(*empty.Empty)(nil), // 13: google.protobuf.Empty
}
var file_examples_tests_message_proto_depIdxs = []int32{
	0,  // 0: tests.TestMessage.enum:type_name -> tests.TestEnum
	0,  // 1: tests.TestMessage.enum_custom:type_name -> tests.TestEnum
	1,  // 2: tests.TestMessage.message:type_name -> tests.TestMessage
	1,  // 3: tests.TestMessage.message_nil:type_name -> tests.TestMessage
	1,  // 4: tests.TestMessage.message_skip:type_name -> tests.TestMessage
	1,  // 5: tests.TestMessage.message_empty:type_name -> tests.TestMessage
	3,  // 6: tests.TestMessage.map1:type_name -> tests.TestMessage.Map1Entry
	4,  // 7: tests.TestMessage.map2:type_name -> tests.TestMessage.Map2Entry
	5,  // 8: tests.TestMessage.map1_empty:type_name -> tests.TestMessage.Map1EmptyEntry
	6,  // 9: tests.TestMessage.map2_empty:type_name -> tests.TestMessage.Map2EmptyEntry
	7,  // 10: tests.TestMessage.map1_nested:type_name -> tests.TestMessage.Map1NestedEntry
	8,  // 11: tests.TestMessage.map2_nested:type_name -> tests.TestMessage.Map2NestedEntry
	9,  // 12: tests.TestMessage.map1_item:type_name -> tests.TestMessage.Map1ItemEntry
	10, // 13: tests.TestMessage.map2_item_nil:type_name -> tests.TestMessage.Map2ItemNilEntry
	11, // 14: tests.TestMessage.map2_item_skip:type_name -> tests.TestMessage.Map2ItemSkipEntry
	12, // 15: tests.TestMessage.map2_item_empty:type_name -> tests.TestMessage.Map2ItemEmptyEntry
	0,  // 16: tests.RepeatedM.enums:type_name -> tests.TestEnum
	0,  // 17: tests.RepeatedM.enum_custom_empties:type_name -> tests.TestEnum
	0,  // 18: tests.RepeatedM.enum_custom_nested:type_name -> tests.TestEnum
	0,  // 19: tests.RepeatedM.enum_customs:type_name -> tests.TestEnum
	1,  // 20: tests.RepeatedM.messages:type_name -> tests.TestMessage
	1,  // 21: tests.RepeatedM.message_nils:type_name -> tests.TestMessage
	1,  // 22: tests.RepeatedM.message_skips:type_name -> tests.TestMessage
	1,  // 23: tests.RepeatedM.message_nested:type_name -> tests.TestMessage
	1,  // 24: tests.RepeatedM.message_empties:type_name -> tests.TestMessage
	13, // 25: tests.TestMessage.Map2Entry.value:type_name -> google.protobuf.Empty
	13, // 26: tests.TestMessage.Map2EmptyEntry.value:type_name -> google.protobuf.Empty
	13, // 27: tests.TestMessage.Map2NestedEntry.value:type_name -> google.protobuf.Empty
	13, // 28: tests.TestMessage.Map2ItemNilEntry.value:type_name -> google.protobuf.Empty
	13, // 29: tests.TestMessage.Map2ItemSkipEntry.value:type_name -> google.protobuf.Empty
	13, // 30: tests.TestMessage.Map2ItemEmptyEntry.value:type_name -> google.protobuf.Empty
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_examples_tests_message_proto_init() }
func file_examples_tests_message_proto_init() {
	if File_examples_tests_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_examples_tests_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_examples_tests_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_examples_tests_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_examples_tests_message_proto_goTypes,
		DependencyIndexes: file_examples_tests_message_proto_depIdxs,
		EnumInfos:         file_examples_tests_message_proto_enumTypes,
		MessageInfos:      file_examples_tests_message_proto_msgTypes,
	}.Build()
	File_examples_tests_message_proto = out.File
	file_examples_tests_message_proto_rawDesc = nil
	file_examples_tests_message_proto_goTypes = nil
	file_examples_tests_message_proto_depIdxs = nil
}
